#!/usr/bin/env python3

import argparse
import collections
import json
import logging
import logging.config

from cxnminer.pattern import PatternElement
from cxnminer.pattern_encoder import PatternEncoder, Base64Encoder

from cxnminer.utils.helpers import open_file

if __name__ == "__main__":

  parser = argparse.ArgumentParser()
  parser.add_argument('vocabulary')
  parser.add_argument('outfile')
  parser.add_argument('encoder')
  parser.add_argument('--no_frequencies', action='store_true', default=False)
  parser.add_argument('--add_special', action='store_true', default=False)
  parser.add_argument('--unknown', type=str, default=None)
  parser.add_argument('--logging_config', default=None)
  args = parser.parse_args()


  loggingConfig = dict(
    version = 1,
    formatters = {
      'f': {'format':
            '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'}
    },
    handlers = {
      'h': {'class': 'logging.StreamHandler',
            'formatter': 'f',
            'level': logging.DEBUG},
    },
    root = {
      'handlers': ['h'],
      'level': logging.DEBUG,
    }
  )

  if args.logging_config is not None:

    try:
      logging_config = json.loads(args.logging_config)
    except json.JSONDecodeError:
      with open(args.logging_config) as config_file:
        logging_config = json.load(config_file)

    loggingConfig.update(logging_config)

  logging.config.dictConfig(loggingConfig)
  logger = logging.getLogger(__name__)


  try:
    vocabularies = json.loads(args.vocabulary)
  except json.JSONDecodeError:
    with open_file(args.vocabulary) as dict_file:
      vocabularies = json.load(dict_file)

  logger.info("Read vocabulary.")

  with open_file(args.encoder, 'rb') as encoder_file:
    encoder = Base64Encoder(PatternEncoder.load(encoder_file), binary=False)

  encoded_vocabularies = collections.defaultdict(dict)
  for level in vocabularies.keys():
    if not args.no_frequencies:
      items = vocabularies[level].keys()
    else:
      items = vocabularies[level]

    logger.info("Start encoding level " + level + " with " + str(len(items)) + " elements.")

    for word in items:
      logger.info("Encoding word " + word + ".")
      encoded_vocabularies[level][word] = encoder.encode_item(PatternElement(word, level))

    if args.unknown is not None:
      logger.info("Encoding unknown element.")
      encoded_vocabularies[level][args.unknown] = encoder.encode_item(PatternElement(args.unknown, level))


  if args.add_special:

    logger.info("Encoding special elements.")
    for word in encoder.get_pattern_type().specialElements():
      encoded_vocabularies["__special__"][word] = encoder.encode_item(word)

    encoded_vocabularies["__special__"][encoder.token_start] = encoder.encode_item(encoder.token_start)
    encoded_vocabularies["__special__"][encoder.token_end] = encoder.encode_item(encoder.token_end)

  logger.info("Finished encoding.")

  with open_file(args.outfile, 'w') as outfile:
    json.dump(encoded_vocabularies, outfile)
